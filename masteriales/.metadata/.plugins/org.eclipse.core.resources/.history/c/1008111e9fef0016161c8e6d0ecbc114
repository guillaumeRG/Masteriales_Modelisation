
public class SLA {
	int Po=0;
	int Qo=0;
	int Qmax=0;
	int Pmax=0;
	int Qmin=0;
	int Pmin=0;
	int Ssp_P=0;
	int Ssp_Q=0;
	int Sc_P=0;
	int Sc_Q=0;
	int DELTA=0;
	int delta=0;
	
	int CurrentEquilibreP;
	int CurrentEquilibreQ;
	
	
	float[][] payOffMatrix;
	public static void main(String[] args) {
		

	}
	public void negociate(){
		 int round = 1;
		 float Pe;
		 float Qe;
		 float Pn;
		 float Qn;
		 float Pc;
		 float Qc;
		 
		 this.payOffMatrixFunction(ScP(Po),ScQ(Qo),SscP(Po),SscQ(Qo),Po,DELTA,delta);
		  
		 this.findNashEquilibrium1();
		  
		 Pe=Po;
		 Qe=Qo;
		 Pn=updateOfferP(Pc);
		 Qn=updateOfferQ(Qc);
		 
		 this.payOffMatrixFunction(ScP(Pe),ScQ(Qe),SscP(Pe),SscQ(Qe),Po,DELTA,delta);
		  
		 next_equilibrium<- findNashEquilibrium1(payOffMatrix)
		  
		 current_satisfactionDiff<-findSatisfactionDiff(current_equilibrium)
		  
		 next_satisfactionDiff<-findSatisfactionDiff(next_equilibrium)
	}
	private void payOffMatrixFunction(float scP, float scQ, float sscP,
			float sscQ, int DELTA,int delta) {
		
		
	}
	public void initFunction(){
		

	}
	
	public void SatisfactionMethode(){
			
			
			
	}
	public void findNashEquilibrium1(){
		
	}
	public float updateOfferP(float P){
		return P;
		
	}
	public float updateOfferQ(float P){
		return P;
		
	}
	public float ScP(float P){
		  return P; 
	}
	public float ScQ(float Q){
		  return Q; 
	}
	public float SscP(float P){
		  return P; 
	}
	public float SscQ(float Q){
		  return Q; 
	}
		

}
