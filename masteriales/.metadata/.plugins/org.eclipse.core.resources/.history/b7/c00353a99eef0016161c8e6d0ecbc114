
public class SLA {
	int Po=0;
	int Qo=0;
	int Qmax=0;
	int Pmax=0;
	int Qmin=0;
	int Pmin=0;
	int Ssp_P=0;
	int Ssp_Q=0;
	int Sc_P=0;
	int Sc_Q=0;
	int DELTA=0;
	int delta=0;
	
	int CurrentEquilibreP;
	int CurrentEquilibreQ;
	
	public static void main(String[] args) {
		

	}
	public void negociate(){
		 int round = 1;
		 
		  float[][] payOffMatrix = payOffMatrixFunction(ScP(P0),ScQ(Q0),SscP(P0),SscQ(Q0),Po)
		  
		  findNashEquilibrium(payOffMatrix)
		  
		  Pe=Po
		  Qe=Qo
		  Pn=updateOfferP(Pc)
		  Qn=updateOfferQ(Qc)
		  
		  payoffMatrix <- payOffMatrixFunction(ScP(Pe),ScQ(Qe),SscP(Pe),SscQ(Qe),Po,DELTA,delta)
		  
		  next_equilibrium<- findNashEquilibrium(payOffMatrix)
		  
		  current_satisfactionDiff<-findSatisfactionDiff(current_equilibrium)
		  
		  next_satisfactionDiff<-findSatisfactionDiff(next_equilibrium)
	}
	public void initFunction(){
		

	}
	
	public void SatisfactionMethode(
			
			
			
	)
	public void findNashEquilibrium(){
		
	}
	public void updateOfferP(float P){
		
	}

}
